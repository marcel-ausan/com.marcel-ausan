/*************************************************************************
 * ULLINK CONFIDENTIAL INFORMATION
 * _______________________________
 *
 * All Rights Reserved.
 *
 * NOTICE: This file and its content are the property of Ullink. The
 * information included has been classified as Confidential and may
 * not be copied, modified, distributed, or otherwise disseminated, in
 * whole or part, without the express written permission of Ullink.
 ************************************************************************/
package algosummary;

import java.util.Iterator;

import java.util.logging.Level;
import java.util.logging.Logger;

import com.ullink.oms.helpers.UserDataServiceImpl;
import com.ullink.oms.model.Action;
import com.ullink.oms.model.User;
import com.ullink.oms.security.CryptingPolicy;
import com.ullink.oms.workers.enrichment.impl.EnrichmentManager;
import com.ullink.oms.workers.enrichment.impl.java.JavaActionEnricher;

@SuppressWarnings("deprecation")
public class CorrectUserPasswords extends JavaActionEnricher {
    public static final Logger logger = Logger.getLogger(EnrichmentManager.class.getSimpleName());

    static {
        listUsers();
    }

    @SuppressWarnings("deprecation")
    static void listUsers() {
        logger.log(Level.INFO, "Calling ListUsers");
        try {
            Iterator<User> iter = UserDataServiceImpl.getInstance().getAll();
            while (iter.hasNext()) {
                User element = iter.next();
                
                if (CryptingPolicy.unCrypt(element.getPassword()) == null) {
                    logger.log(Level.WARNING, "PasswordHash for " + element.getId() + " isn't correct: " + element.getPassword());
                    element.setPassword("Ull!nk2017");
                    UserDataServiceImpl.getInstance().update(element);
                    logger.log(Level.WARNING, " " + element.getId() + " password resetted to " + CryptingPolicy.unCrypt(element.getPassword()));
                }
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, e.toString());
        }
    }

    /**
     * doEnrich method for action enrichment
     * 
     * @param p0
     *            : Action
     */
    public void doEnrich(Action p0) throws Exception {
        // TODO: autogenerated enrichment, add your code here
    }
}
